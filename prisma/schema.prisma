// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Institute {
  id            String   @id @default(cuid())
  name          String
  subdomain     String   @unique
  instituteCode String   @unique
  logo          String?
  primaryColor  String   @default("#3B82F6")
  subscription  String   @default("BASIC")
  studentLimit  Int      @default(100)
  createdAt     DateTime @default(now())
  users         User[]
  classes       Class[]
  announcements Announcement[]
  messages      Message[]
  notifications Notification[]

  @@map("institutes")
}

model User {
  id          String    @id @default(cuid())
  email       String
  password    String
  name        String
  role        String    // OWNER, ADMIN, TEACHER, STUDENT, PARENT
  instituteId String
  institute   Institute @relation(fields: [instituteId], references: [id])
  createdAt   DateTime  @default(now())
  teacherClasses Class[] @relation("TeacherClasses")
  announcementsCreated Announcement[] @relation("AnnouncementCreator")
  announcementsRead AnnouncementRead[] @relation("AnnouncementReader")
  sentMessages Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageRecipient")
  notifications Notification[] @relation("UserNotifications")

  @@unique([email, instituteId])
  @@map("users")
}

model Class {
  id          String       @id @default(cuid())
  name        String
  subject     String
  description String?
  instituteId String
  institute   Institute    @relation(fields: [instituteId], references: [id])
  teacherId   String
  teacher     User         @relation("TeacherClasses", fields: [teacherId], references: [id])
  capacity    Int          @default(30)
  schedule    String       // JSON string for weekly schedule
  isVirtual   Boolean      @default(false)
  meetingLink String?
  location    String?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  students    Student[]
  attendance  Attendance[]
  materials   Material[]
  qrSessions  QRSession[]
  homework    Homework[]

  @@map("classes")
}

model Student {
  id      String @id @default(cuid())
  userId  String
  classId String
  class   Class  @relation(fields: [classId], references: [id])

  @@map("students")
}

model Attendance {
  id          String    @id @default(cuid())
  date        DateTime
  status      String    // PRESENT, ABSENT, LATE
  studentId   String
  classId     String
  class       Class     @relation(fields: [classId], references: [id])
  markedAt    DateTime  @default(now())
  markedBy    String?   // ID of user who marked (teacher/admin)
  qrSessionId String?   // Optional: if marked via QR code
  qrSession   QRSession? @relation(fields: [qrSessionId], references: [id])

  @@unique([studentId, classId, date])
  @@map("attendance")
}

model QRSession {
  id          String      @id @default(cuid())
  classId     String
  class       Class       @relation(fields: [classId], references: [id])
  sessionCode String      @unique
  expiresAt   DateTime
  createdBy   String      // Teacher/Admin who created
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  attendance  Attendance[]

  @@map("qr_sessions")
}

model Material {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileUrl     String
  fileName    String
  fileSize    Int
  fileType    String
  classId     String
  class       Class    @relation(fields: [classId], references: [id])
  uploadedAt  DateTime @default(now())

  @@map("materials")
}

model Homework {
  id            String      @id @default(cuid())
  title         String
  description   String
  dueDate       DateTime
  totalPoints   Int         @default(100)
  attachments   String?     // JSON array of file URLs
  instructions  String?
  status        String      @default("DRAFT") // DRAFT, PUBLISHED, CLOSED
  classId       String
  class         Class       @relation(fields: [classId], references: [id])
  createdBy     String      // Teacher ID
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  submissions   HomeworkSubmission[]

  @@map("homework")
}

model HomeworkSubmission {
  id            String    @id @default(cuid())
  homeworkId    String
  homework      Homework  @relation(fields: [homeworkId], references: [id])
  studentId     String
  answer        String?   // Rich text answer
  attachments   String?   // JSON array of file URLs
  submittedAt   DateTime  @default(now())
  status        String    @default("SUBMITTED") // SUBMITTED, GRADED, RETURNED
  grade         Int?      // Points awarded
  maxGrade      Int?      // Points possible at submission time
  feedback      String?   // Teacher feedback
  gradedBy      String?   // Teacher ID who graded
  gradedAt      DateTime?
  isLate        Boolean   @default(false)

  @@unique([homeworkId, studentId])
  @@map("homework_submissions")
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String
  priority    String   @default("MEDIUM") // HIGH, MEDIUM, LOW
  isPinned    Boolean  @default(false)
  targetRole  String?  // Optional: STUDENT, TEACHER, PARENT - if null, all users
  classIds    String?  // JSON array of class IDs to target specific classes
  instituteId String
  institute   Institute @relation(fields: [instituteId], references: [id])
  createdBy   String   // User ID of creator
  creator     User     @relation("AnnouncementCreator", fields: [createdBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  readBy      AnnouncementRead[]

  @@map("announcements")
}

model AnnouncementRead {
  id             String       @id @default(cuid())
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  userId         String
  user           User         @relation("AnnouncementReader", fields: [userId], references: [id])
  readAt         DateTime     @default(now())

  @@unique([announcementId, userId])
  @@map("announcement_reads")
}

model Message {
  id           String      @id @default(cuid())
  subject      String?
  content      String
  senderId     String
  sender       User        @relation("MessageSender", fields: [senderId], references: [id])
  recipientId  String
  recipient    User        @relation("MessageRecipient", fields: [recipientId], references: [id])
  conversationId String?   // Groups messages in a conversation thread
  replyToId    String?     // ID of message this is replying to
  replyTo      Message?    @relation("MessageReplies", fields: [replyToId], references: [id])
  replies      Message[]   @relation("MessageReplies")
  isRead       Boolean     @default(false)
  instituteId  String
  institute    Institute   @relation(fields: [instituteId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("messages")
}

model Notification {
  id          String    @id @default(cuid())
  title       String
  message     String
  type        String    // ANNOUNCEMENT, MESSAGE, HOMEWORK, ATTENDANCE, SYSTEM
  relatedId   String?   // ID of related entity (announcement, message, etc.)
  userId      String
  user        User      @relation("UserNotifications", fields: [userId], references: [id])
  isRead      Boolean   @default(false)
  instituteId String
  institute   Institute @relation(fields: [instituteId], references: [id])
  createdAt   DateTime  @default(now())

  @@map("notifications")
}